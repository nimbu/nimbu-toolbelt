// This script is heavily inspired by scripts/start.js generated by create-react-app
// after ejecting.
process.env.BABEL_ENV = 'development';
process.env.NODE_ENV = 'development';

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on('unhandledRejection', err => {
  throw err;
});

const chalk = require('chalk');
const webpack = require('webpack');
const WebpackDevServer = require('webpack-dev-server');
const clearConsole = require('react-dev-utils/clearConsole');
const checkRequiredFiles = require('react-dev-utils/checkRequiredFiles');
const {
  choosePort,
  createCompiler,
  prepareProxy,
  prepareUrls,
} = require('react-dev-utils/WebpackDevServerUtils');
const openBrowser = require('react-dev-utils/openBrowser');
const config = require('../config/webpack.dev.js');
const createDevServerConfig = require('../config/webpackDevServer.config.js');
const child_process = require('child_process');
const path = require('path');
const paths = require('../config/paths.js');

const useYarn = true;
const isInteractive = process.stdout.isTTY;

const NIMBU_PORT = parseInt(process.env.NIMBU_PORT, 10) || 4568;
const DEFAULT_PORT = parseInt(process.env.PORT, 10) || 4567;
const HOST = process.env.HOST || '0.0.0.0';

// Spawn nimbu server
console.log(chalk.red('Starting nimbu server...'))
const args = ['exec', 'nimbu',  'server', '--haml', '--host', '127.0.0.1', '--port', `${NIMBU_PORT}`, ...process.argv.slice(2)]
const nimbuServer = child_process.spawn(
  'bundle',
  args,
  {
    shell: true,
    stdio: 'inherit'
  }
);

// Give nimbu server some time to start
console.log(chalk.red('Giving nimbu server some time to start...'))
const sleep = require('system-sleep');
sleep(2000);


choosePort(HOST, DEFAULT_PORT)
  .then(port => {
    if (port == null) {
      // We have not found a port.
      return;
    }
    const protocol = process.env.HTTPS === 'true' ? 'https' : 'http';
    const appName = require(path.resolve(paths.PROJECT_DIRECTORY, 'package.json')).name;
    const urls = prepareUrls(protocol, HOST, port);
    const compiler = createCompiler(webpack, config, appName, urls, useYarn);
    const proxyConfig = {'*': { target: `http://localhost:${NIMBU_PORT}` }};
    // Serve webpack assets generated by the compiler over a web sever.
    const serverConfig = createDevServerConfig(
      proxyConfig,
      urls.lanUrlForConfig
    );
    const devServer = new WebpackDevServer(compiler, serverConfig);
    // Launch WebpackDevServer.
    devServer.listen(port, HOST, err => {
      if (err) {
        return console.log(err);
      }
      if (isInteractive) {
        clearConsole();
      }
      console.log(chalk.cyan('Starting the development server...\n'));
      openBrowser(urls.localUrlForBrowser);
    });

    ['SIGINT', 'SIGTERM'].forEach(function(sig) {
      process.on(sig, function() {
        devServer.close();
        nimbuServer.kill();
        console.log(chalk.red('Giving nimbu server some time to stop...'))
        sleep(2000);
        process.exit();
      });
    });
  })
  .catch(err => {
    if (err && err.message) {
      console.log(err.message);
    }
    nimbuServer.kill();
    console.log(chalk.red('Giving nimbu server some time to stop...'))
    sleep(2000);
    process.exit(1);
  });
