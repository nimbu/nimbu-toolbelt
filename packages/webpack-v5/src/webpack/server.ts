import webpack = require('webpack')
import DevServer = require('webpack-dev-server')
import path = require('path')

import Debug from 'debug'

import { buildConfig } from '@nimbu-cli/command'
const { get: getProjectConfig } = buildConfig

const debug = Debug('nimbu')

export default class WebpackDevServer {
  private server?: DevServer

  async start(
    host: string,
    defaultPort: number,
    nimbuPort: number,
    protocol: string,
    open: boolean,
    options?: { poll?: boolean },
  ): Promise<void> {
    debug('Starting webpack-dev-server...')

    // setup BABEL_ENV and NODE_ENV
    this.setupEnv()

    // load all dependencies at runtime
    const fs = require('fs')

    const { choosePort, createCompiler, prepareUrls } = require('react-dev-utils/WebpackDevServerUtils')
    const openBrowser = require('react-dev-utils/openBrowser')

    const paths = require('../config/paths')
    const configFactory = require('../config/webpack.config')
    const projectWebpack = require('../config/webpack.project')

    const createDevServerConfig = require('../config/webpackDevServer.config')
    const getClientEnvironment = require('../config/env')

    const useYarn = fs.existsSync(paths.yarnLockFile)
    const isInteractive = process.stdout.isTTY

    // We require that you explicitly set browsers and do not fall back to
    // browserslist defaults.
    const { checkBrowsers } = require('react-dev-utils/browsersHelper')
    await checkBrowsers(paths.appPath, isInteractive)

    // Find a port to run
    const port = await choosePort(host, defaultPort)
    if (port == null) {
      // We have not found a port.
      return Promise.reject(new Error('Could not find a port to run on.'))
    }

    debug(`Port ${port} is available`)

    const appName = require(path.resolve(paths.PROJECT_DIRECTORY, 'package.json')).name
    const useTypeScript = fs.existsSync(paths.appTsConfig)

    const urls = prepareUrls(protocol, host, port, paths.publicUrlOrPath.slice(0, -1))

    // Get the custom config for each project
    debug('Getting project config')
    const config = projectWebpack.customize(configFactory('development'), getProjectConfig())

    // Create a webpack compiler that is configured with custom messages.
    debug('Create compiler')
    const compiler = createCompiler({
      appName,
      config,
      urls,
      useTypeScript,
      useYarn,
      webpack,
    })

    // Serve webpack assets generated by the compiler over a web sever.
    debug('Create devserver config')
    const proxyConfig = {
      '*': { target: `http://localhost:${nimbuPort}` },
    }
    const serverConfig = {
      ...createDevServerConfig(proxyConfig, [urls.lanUrlForConfig, 'localhost', '.localhost']),
      host: host,
      port,
    }

    // Launch WebpackDevServer.
    debug('Starting webpack dev server')
    this.server = new DevServer(serverConfig, compiler)
    await this.listen(host, port)

    if (open) {
      openBrowser(urls.localUrlForBrowser)
    }
  }

  async stop(): Promise<void> {
    return new Promise<void>((resolve, reject) => {
      if (this.server) {
        this.server.stop().catch((err: Error | null) => {
          if (err) {
            reject(err)
          } else {
            this.server = undefined
            resolve()
          }
        })
      } else {
        reject(new Error('Server is not started'))
      }
    })
  }

  isRunning(): boolean {
    return this.server !== undefined
  }

  private setupEnv() {
    process.env.BABEL_ENV = 'development'
    process.env.NODE_ENV = 'development'
  }

  private async listen(host: string, port: number): Promise<void> {
    return new Promise<void>((resolve, reject) => {
      if (this.server) {
        this.server.start().catch((err: Error | null) => {
          if (err) {
            reject(err)
          } else {
            resolve()
          }
        })
      } else {
        reject(new Error('Server is not set.'))
      }
    })
  }
}
